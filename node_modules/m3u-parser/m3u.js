var Promise = require('bluebird');

function parse (data) {
    if (Buffer.isBuffer(data))
        data = data.toString();
    else if (typeof data !== 'string')
        return Promise.reject(new TypeError('Data passed to the parser should be a string'));

    return new Promise(function (resolve, reject) {
        data = data.split('\n')
            .filter(function (str) {
                return str.length > 0;
            });

        if (data.shift().trim() !== '#EXTM3U')
            return reject(new Error('Passed data is not valid M3U playlist'));

        var buffer = [], isWaitingForLink = false, line;

        while ((line = data.shift())) {
            line = line.trim();

            if (isWaitingForLink) {
                buffer[buffer.length - 1].url = line;
                isWaitingForLink = false;
            } else if (line.slice(0, 7) === '#EXTINF') {
                
                var regexp = /^#EXTINF:(-?)(\d+)(\s(tvg-ID=)?("(.*?)")?\s(tvg-name=)?("(.*?)")?\s(tvg-logo=)?("(.*?)")?\s(group-title=)?("(.*?)")?)?,?\s?(.*)$/g;
                var result = regexp.exec(
                  line
                );
                if (!result)
                    throw new Error('Invalid M3U format');
                /*
                result[0] - self
                result[1] - (-) sign
                result[2] - duration
                result[6] - tvg-ID
                result[9] - tvg-name
                result[12] - tvg-logo
                result[15] - group-title
                result[16] - title
                */
                
                var item = {};
                item.title = result[16];

                item.duration = result[1] + result[2];
                if (result[6])
                    item.tvgID = result[6].trim();
                if (result[9])
                    item.tvgname = result[9].trim();
                if (result[12])
                    item.tvglogo = result[12].trim();
                if (result[15])
                    item.grouptitle = result[15].trim();
                
                // buffer.push({
                //     title:    result[6].trim(),
                //     duration: +(result[1] + result[2].trim())
                // });
                buffer.push(item);

                isWaitingForLink = true;
            } else {
                throw new Error('Invalid data');
            }
        }

        resolve(buffer);
    });
}

module.exports.parse = parse;
